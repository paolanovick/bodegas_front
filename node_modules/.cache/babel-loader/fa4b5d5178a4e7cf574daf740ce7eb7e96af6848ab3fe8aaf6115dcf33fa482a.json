{"ast":null,"code":"import axios from \"axios\";\n\n// URL base para las APIs de vinos\nconst API_URL_VINOS = \"http://localhost:3000/vinos\"; // Cambia esto según tu configuración de backend\n\n// Crear un nuevo vino\nconst crearVino = async nuevoVino => {\n  try {\n    const response = await axios.post(API_URL_VINOS, nuevoVino);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error al crear un nuevo vino:\", error);\n    throw error;\n  }\n};\n\n// Obtener todos los vinos sin filtros ni paginación (todos los registros)\nconst obtenerTodosLosVinos = async () => {\n  try {\n    const response = await axios.get(API_URL_VINOS);\n    return response.data;\n  } catch (error) {\n    console.error(\"Error al obtener todos los vinos:\", error);\n    throw error;\n  }\n};\n\n// Obtener vinos con paginación y ordenamiento explícito\nconst obtenerVinosConPaginado = async (params = {}) => {\n  try {\n    const response = await axios.get(`${API_URL_VINOS}/paginado`, {\n      params\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error al obtener vinos con paginación:\", error);\n    throw error;\n  }\n};\n\n// Obtener un vino por ID\nconst obtenerVinoPorId = async id => {\n  try {\n    const response = await axios.get(`${API_URL_VINOS}/id/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener el vino con ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Obtener vinos por nombre\nconst obtenerVinosPorNombre = async nombre => {\n  try {\n    const response = await axios.get(`${API_URL_VINOS}/nombre/${nombre}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al obtener vinos por nombre ${nombre}:`, error);\n    throw error;\n  }\n};\n\n// Actualizar un vino por ID\nconst actualizarVino = async (id, vinoActualizado) => {\n  try {\n    const response = await axios.put(`${API_URL_VINOS}/id/${id}`, vinoActualizado);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al actualizar el vino con ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Eliminar un vino por ID\nconst eliminarVino = async id => {\n  try {\n    const response = await axios.delete(`${API_URL_VINOS}/id/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error(`Error al eliminar el vino con ID ${id}:`, error);\n    throw error;\n  }\n};\n\n// Exportar todas las funciones del servicio de vinos de forma separada\nexport { crearVino, obtenerTodosLosVinos,\n// Obtener todos los vinos sin filtros\nobtenerVinosConPaginado, obtenerVinoPorId, obtenerVinosPorNombre, actualizarVino, eliminarVino };","map":{"version":3,"names":["axios","API_URL_VINOS","crearVino","nuevoVino","response","post","data","error","console","obtenerTodosLosVinos","get","obtenerVinosConPaginado","params","obtenerVinoPorId","id","obtenerVinosPorNombre","nombre","actualizarVino","vinoActualizado","put","eliminarVino","delete"],"sources":["C:/Users/LENOVO/Desktop/fullStack-vinci/gestion-bebidas/src/services/vinoService.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// URL base para las APIs de vinos\r\nconst API_URL_VINOS = \"http://localhost:3000/vinos\"; // Cambia esto según tu configuración de backend\r\n\r\n// Crear un nuevo vino\r\nconst crearVino = async (nuevoVino) => {\r\n  try {\r\n    const response = await axios.post(API_URL_VINOS, nuevoVino);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error al crear un nuevo vino:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener todos los vinos sin filtros ni paginación (todos los registros)\r\nconst obtenerTodosLosVinos = async () => {\r\n  try {\r\n    const response = await axios.get(API_URL_VINOS);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error al obtener todos los vinos:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener vinos con paginación y ordenamiento explícito\r\nconst obtenerVinosConPaginado = async (params = {}) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL_VINOS}/paginado`, { params });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error al obtener vinos con paginación:\", error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener un vino por ID\r\nconst obtenerVinoPorId = async (id) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL_VINOS}/id/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al obtener el vino con ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Obtener vinos por nombre\r\nconst obtenerVinosPorNombre = async (nombre) => {\r\n  try {\r\n    const response = await axios.get(`${API_URL_VINOS}/nombre/${nombre}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al obtener vinos por nombre ${nombre}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Actualizar un vino por ID\r\nconst actualizarVino = async (id, vinoActualizado) => {\r\n  try {\r\n    const response = await axios.put(`${API_URL_VINOS}/id/${id}`, vinoActualizado);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al actualizar el vino con ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Eliminar un vino por ID\r\nconst eliminarVino = async (id) => {\r\n  try {\r\n    const response = await axios.delete(`${API_URL_VINOS}/id/${id}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(`Error al eliminar el vino con ID ${id}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Exportar todas las funciones del servicio de vinos de forma separada\r\nexport {\r\n  crearVino,\r\n  obtenerTodosLosVinos, // Obtener todos los vinos sin filtros\r\n  obtenerVinosConPaginado,\r\n  obtenerVinoPorId,\r\n  obtenerVinosPorNombre,\r\n  actualizarVino,\r\n  eliminarVino,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}